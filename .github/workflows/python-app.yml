# streamlit_dictionary_classifier.py
"""
üìä **Dictionary‚ÄëBased Text Classifier (Streamlit)**

An interactive app that lets you:
1. Upload a CSV file containing free‚Äëtext statements.
2. Edit / extend keyword dictionaries per marketing‚Äëtactic category.
3. Classify each statement and download the enriched CSV.

Run with:
```bash
streamlit run streamlit_dictionary_classifier.py
```
"""

from __future__ import annotations

import io
from pathlib import Path
from typing import Dict, Set

import pandas as pd
import streamlit as st

# -------------------------------------------------------------------
# 1. Default keyword dictionaries (editable inside the app)
# -------------------------------------------------------------------
DEFAULT_DICTIONARIES: Dict[str, Set[str]] = {
    "urgency_marketing": {
        "limited",
        "limited time",
        "limited run",
        "limited edition",
        "order now",
        "last chance",
        "hurry",
        "while supplies last",
        "before they're gone",
        "selling out",
        "selling fast",
        "act now",
        "don't wait",
        "today only",
        "expires soon",
        "final hours",
        "almost gone",
    },
    "exclusive_marketing": {
        "exclusive",
        "exclusively",
        "exclusive offer",
        "exclusive deal",
        "members only",
        "vip",
        "special access",
        "invitation only",
        "premium",
        "privileged",
        "limited access",
        "select customers",
        "insider",
        "private sale",
        "early access",
    },
}

# -------------------------------------------------------------------
# 2. Helper functions
# -------------------------------------------------------------------

def classify_text(text: str, dictionaries: Dict[str, Set[str]]) -> str:
    """Return a comma‚Äëseparated list of tactic labels found in *text*."""
    if not isinstance(text, str):
        return ""

    text_lc = text.lower()
    matches = []

    for label, phrases in dictionaries.items():
        if any(phrase in text_lc for phrase in phrases):  # first hit wins per label
            matches.append(label)

    return ", ".join(matches)


def download_button(df: pd.DataFrame) -> None:
    """Render a download button for *df* as CSV."""
    csv_bytes = df.to_csv(index=False).encode("utf-8")
    st.download_button(
        "‚¨áÔ∏è Download classified CSV",
        data=csv_bytes,
        file_name="classified_data.csv",
        mime="text/csv",
    )


# -------------------------------------------------------------------
# 3. Streamlit App
# -------------------------------------------------------------------

def main() -> None:
    st.set_page_config(page_title="Dictionary Text Classifier", page_icon="üìä", layout="wide")
    st.title("üìä Dictionary‚ÄëBased Text Classifier")
    st.write(
        "Upload a CSV, tweak the keyword dictionaries, then classify each statement into one or more marketing‚Äëtactic categories."
    )

    # ----------------------------------------------------------------
    # Sidebar: dictionary editor
    # ----------------------------------------------------------------
    with st.sidebar:
        st.header("üõ†Ô∏è Keyword Dictionaries")

        if "dictionaries" not in st.session_state:
            # Deep‚Äëcopy to avoid mutating defaults across sessions
            st.session_state["dictionaries"] = {
                k: set(v) for k, v in DEFAULT_DICTIONARIES.items()
            }

        dictionaries = st.session_state["dictionaries"]

        for label in list(dictionaries.keys()):
            phrases_str = ", ".join(sorted(dictionaries[label]))
            edited = st.text_area(
                f"Keywords for '{label}' (comma separated)",
                value=phrases_str,
                height=80,
            )
            dictionaries[label] = {p.strip().lower() for p in edited.split(",") if p.strip()}

        st.divider()
        st.subheader("Add a new category")
        new_label = st.text_input("Category label")
        new_keywords = st.text_input("Keywords (comma separated)")
        if st.button("Add / Update Category") and new_label:
            dictionaries[new_label] = {
                p.strip().lower() for p in new_keywords.split(",") if p.strip()
            }
            # Force UI refresh so the new text_area appears
            st.experimental_rerun()

        if st.button("Reset to Defaults"):
            st.session_state["dictionaries"] = {
                k: set(v) for k, v in DEFAULT_DICTIONARIES.items()
            }
            st.experimental_rerun()

    # ----------------------------------------------------------------
    # Main area: file uploader & classification
    # ----------------------------------------------------------------
    uploaded_file = st.file_uploader("üìÑ Upload CSV file", type=["csv"], accept_multiple_files=False)

    if uploaded_file is None:
        st.info("üëÜ Upload a CSV file to begin.")
        st.stop()

    try:
        df = pd.read_csv(uploaded_file)
    except Exception as exc:
        st.error(f"Failed to read CSV: {exc}")
        st.stop()

    if df.empty:
        st.warning("The uploaded file is empty.")
        st.stop()

    # Choose text column
    text_col = st.selectbox("Select the column containing statements to classify", options=df.columns)

    # Classify button
    if st.button("üöÄ Run Classification"):
        with st.spinner("Classifying‚Ä¶"):
            df["Category"] = df[text_col].apply(lambda t: classify_text(t, dictionaries))

        st.success("Done!")
        st.dataframe(df, use_container_width=True)
        download_button(df)


if __name__ == "__main__":
    main()

